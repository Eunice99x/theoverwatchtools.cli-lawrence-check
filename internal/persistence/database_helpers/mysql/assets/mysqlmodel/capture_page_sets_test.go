// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysqlmodel

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCapturePageSets(t *testing.T) {
	t.Parallel()

	query := CapturePageSets()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCapturePageSetsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CapturePageSet{}
	if err = randomize.Struct(seed, o, capturePageSetDBTypes, true, capturePageSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CapturePageSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCapturePageSetsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CapturePageSet{}
	if err = randomize.Struct(seed, o, capturePageSetDBTypes, true, capturePageSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CapturePageSets().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CapturePageSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCapturePageSetsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CapturePageSet{}
	if err = randomize.Struct(seed, o, capturePageSetDBTypes, true, capturePageSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CapturePageSetSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CapturePageSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCapturePageSetsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CapturePageSet{}
	if err = randomize.Struct(seed, o, capturePageSetDBTypes, true, capturePageSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CapturePageSetExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CapturePageSet exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CapturePageSetExists to return true, but got false.")
	}
}

func testCapturePageSetsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CapturePageSet{}
	if err = randomize.Struct(seed, o, capturePageSetDBTypes, true, capturePageSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	capturePageSetFound, err := FindCapturePageSet(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if capturePageSetFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCapturePageSetsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CapturePageSet{}
	if err = randomize.Struct(seed, o, capturePageSetDBTypes, true, capturePageSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CapturePageSets().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCapturePageSetsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CapturePageSet{}
	if err = randomize.Struct(seed, o, capturePageSetDBTypes, true, capturePageSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CapturePageSets().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCapturePageSetsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	capturePageSetOne := &CapturePageSet{}
	capturePageSetTwo := &CapturePageSet{}
	if err = randomize.Struct(seed, capturePageSetOne, capturePageSetDBTypes, false, capturePageSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}
	if err = randomize.Struct(seed, capturePageSetTwo, capturePageSetDBTypes, false, capturePageSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = capturePageSetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = capturePageSetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CapturePageSets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCapturePageSetsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	capturePageSetOne := &CapturePageSet{}
	capturePageSetTwo := &CapturePageSet{}
	if err = randomize.Struct(seed, capturePageSetOne, capturePageSetDBTypes, false, capturePageSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}
	if err = randomize.Struct(seed, capturePageSetTwo, capturePageSetDBTypes, false, capturePageSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = capturePageSetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = capturePageSetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CapturePageSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func capturePageSetBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CapturePageSet) error {
	*o = CapturePageSet{}
	return nil
}

func capturePageSetAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CapturePageSet) error {
	*o = CapturePageSet{}
	return nil
}

func capturePageSetAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CapturePageSet) error {
	*o = CapturePageSet{}
	return nil
}

func capturePageSetBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CapturePageSet) error {
	*o = CapturePageSet{}
	return nil
}

func capturePageSetAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CapturePageSet) error {
	*o = CapturePageSet{}
	return nil
}

func capturePageSetBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CapturePageSet) error {
	*o = CapturePageSet{}
	return nil
}

func capturePageSetAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CapturePageSet) error {
	*o = CapturePageSet{}
	return nil
}

func capturePageSetBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CapturePageSet) error {
	*o = CapturePageSet{}
	return nil
}

func capturePageSetAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CapturePageSet) error {
	*o = CapturePageSet{}
	return nil
}

func testCapturePageSetsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CapturePageSet{}
	o := &CapturePageSet{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, capturePageSetDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CapturePageSet object: %s", err)
	}

	AddCapturePageSetHook(boil.BeforeInsertHook, capturePageSetBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	capturePageSetBeforeInsertHooks = []CapturePageSetHook{}

	AddCapturePageSetHook(boil.AfterInsertHook, capturePageSetAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	capturePageSetAfterInsertHooks = []CapturePageSetHook{}

	AddCapturePageSetHook(boil.AfterSelectHook, capturePageSetAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	capturePageSetAfterSelectHooks = []CapturePageSetHook{}

	AddCapturePageSetHook(boil.BeforeUpdateHook, capturePageSetBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	capturePageSetBeforeUpdateHooks = []CapturePageSetHook{}

	AddCapturePageSetHook(boil.AfterUpdateHook, capturePageSetAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	capturePageSetAfterUpdateHooks = []CapturePageSetHook{}

	AddCapturePageSetHook(boil.BeforeDeleteHook, capturePageSetBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	capturePageSetBeforeDeleteHooks = []CapturePageSetHook{}

	AddCapturePageSetHook(boil.AfterDeleteHook, capturePageSetAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	capturePageSetAfterDeleteHooks = []CapturePageSetHook{}

	AddCapturePageSetHook(boil.BeforeUpsertHook, capturePageSetBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	capturePageSetBeforeUpsertHooks = []CapturePageSetHook{}

	AddCapturePageSetHook(boil.AfterUpsertHook, capturePageSetAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	capturePageSetAfterUpsertHooks = []CapturePageSetHook{}
}

func testCapturePageSetsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CapturePageSet{}
	if err = randomize.Struct(seed, o, capturePageSetDBTypes, true, capturePageSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CapturePageSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCapturePageSetsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CapturePageSet{}
	if err = randomize.Struct(seed, o, capturePageSetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(capturePageSetColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CapturePageSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCapturePageSetToManyCapturePages(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CapturePageSet
	var b, c CapturePage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, capturePageSetDBTypes, true, capturePageSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, capturePageDBTypes, false, capturePageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, capturePageDBTypes, false, capturePageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CapturePageSetID = a.ID
	c.CapturePageSetID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CapturePages().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CapturePageSetID == b.CapturePageSetID {
			bFound = true
		}
		if v.CapturePageSetID == c.CapturePageSetID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CapturePageSetSlice{&a}
	if err = a.L.LoadCapturePages(ctx, tx, false, (*[]*CapturePageSet)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CapturePages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CapturePages = nil
	if err = a.L.LoadCapturePages(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CapturePages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCapturePageSetToManyAddOpCapturePages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CapturePageSet
	var b, c, d, e CapturePage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, capturePageSetDBTypes, false, strmangle.SetComplement(capturePageSetPrimaryKeyColumns, capturePageSetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CapturePage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, capturePageDBTypes, false, strmangle.SetComplement(capturePagePrimaryKeyColumns, capturePageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CapturePage{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCapturePages(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CapturePageSetID {
			t.Error("foreign key was wrong value", a.ID, first.CapturePageSetID)
		}
		if a.ID != second.CapturePageSetID {
			t.Error("foreign key was wrong value", a.ID, second.CapturePageSetID)
		}

		if first.R.CapturePageSet != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CapturePageSet != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CapturePages[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CapturePages[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CapturePages().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCapturePageSetsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CapturePageSet{}
	if err = randomize.Struct(seed, o, capturePageSetDBTypes, true, capturePageSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCapturePageSetsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CapturePageSet{}
	if err = randomize.Struct(seed, o, capturePageSetDBTypes, true, capturePageSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CapturePageSetSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCapturePageSetsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CapturePageSet{}
	if err = randomize.Struct(seed, o, capturePageSetDBTypes, true, capturePageSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CapturePageSets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	capturePageSetDBTypes = map[string]string{`ID`: `bigint`, `Name`: `varchar`, `URLName`: `varchar`, `CreatedBy`: `bigint`, `UpdatedBy`: `bigint`, `OrganizationID`: `bigint`, `SwitchDurationInMinutes`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `AnalyticsNumberOfForms`: `int`, `AnalyticsImpressions`: `int`, `AnalyticsSubmissions`: `int`, `AnalyticsLastUpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_                     = bytes.MinRead
)

func testCapturePageSetsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(capturePageSetPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(capturePageSetAllColumns) == len(capturePageSetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CapturePageSet{}
	if err = randomize.Struct(seed, o, capturePageSetDBTypes, true, capturePageSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CapturePageSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, capturePageSetDBTypes, true, capturePageSetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCapturePageSetsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(capturePageSetAllColumns) == len(capturePageSetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CapturePageSet{}
	if err = randomize.Struct(seed, o, capturePageSetDBTypes, true, capturePageSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CapturePageSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, capturePageSetDBTypes, true, capturePageSetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(capturePageSetAllColumns, capturePageSetPrimaryKeyColumns) {
		fields = capturePageSetAllColumns
	} else {
		fields = strmangle.SetComplement(
			capturePageSetAllColumns,
			capturePageSetPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CapturePageSetSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCapturePageSetsUpsert(t *testing.T) {
	t.Parallel()

	if len(capturePageSetAllColumns) == len(capturePageSetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLCapturePageSetUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CapturePageSet{}
	if err = randomize.Struct(seed, &o, capturePageSetDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CapturePageSet: %s", err)
	}

	count, err := CapturePageSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, capturePageSetDBTypes, false, capturePageSetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CapturePageSet struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CapturePageSet: %s", err)
	}

	count, err = CapturePageSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
